/*!
 * chaffle v1.0.0
 *
 * Licensed under MIT
 * Author : blivesta
 *
 */
(function($) {
  var namespace = "chaffle";
  var methods = {
    init: function(options) {
      options = $.extend({
        speed: 20,
        time: 140
      }, options);
      return this.each(function() {
        var _this = this;
        var $this = $(this);
        var data = $this.data(namespace);
        if (!data) {
          options = $.extend({}, options);
          $this.data(namespace, {
            options: options
          });
        }
        var $text = $this.text();
        var substitution;
        var shuffle_timer;
        var shuffle_timer_delay;
        var shuffle = function() {
          $this.text(substitution);
          if ($text.length - substitution.length > 0) {
            for (i = 0; i < $text.length - substitution.length; i++) {
              var shuffleStr = random_text.call();
              $this.append(shuffleStr);
            }
          } else {
            clearInterval(shuffle_timer);
          }
        };
        var shuffle_delay = function() {
          if (substitution.length < $text.length) {
            substitution = $text.substr(0, substitution.length + 1);
          } else {
            clearInterval(shuffle_timer_delay);
          }
        };
        var random_text = function() {
          var str;
          var lang = $this.data("lang");
          switch (lang) {
            case "en":
              str = String.fromCharCode(33 + Math.round(Math.random() * 99));
              break;

            case "ja":
              str = String.fromCharCode(19968 + Math.round(Math.random() * 80));
              break;

            case "ja-hiragana":
              str = String.fromCharCode(12352 + Math.round(Math.random() * 50));
              break;

            case "ja-katakana":
              str = String.fromCharCode(12448 + Math.round(Math.random() * 84));
              break;
          }
          return str;
        };
        var start = function() {
          substitution = "";
          clearInterval(shuffle_timer);
          clearInterval(shuffle_timer_delay);
          shuffle_timer = setInterval(function() {
            shuffle.call(_this);
          }, options.speed);
          shuffle_timer_delay = setInterval(function() {
            shuffle_delay.call(this);
          }, options.time);
        };
        $this.unbind("mouseover." + namespace).bind("mouseover." + namespace, function() {
          start.call(_this);
        });
      });
    },
    destroy: function() {
      return this.each(function() {
        var $this = $(this);
        $(window).unbind("." + namespace);
        $this.removeData(namespace);
      });
    }
  };
  $.fn.chaffle = function(method) {
    if (methods[method]) {
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if (typeof method === "object" || !method) {
      return methods.init.apply(this, arguments);
    } else {
      $.error("Method " + method + " does not exist on jQuery." + namespace);
    }
  };
})(jQuery);

/**
 * Woocommerce single product
 */

(function ($) {

  'use strict';

  $(function () {

    $('.woocommerce .variations_form .variations .value select').select2({
      minimumResultsForSearch: 10 // at least 10 results must be displayed
    });

  });

})(jQuery);

(function ($) {

  'use strict';
  $(function () {

    var createSnackbar = (function() {
      var previous = null;

      return function(message1) {
        if (previous) {
          previous.dismiss();
        }
        var snackbar = document.createElement('div');
        snackbar.className = 'crane-woo-snackbar';
        snackbar.dismiss = function() {
          this.style.opacity = 0;
        };
        var text = document.createTextNode(message1);
        var snackbarText = document.createElement('span');
        snackbarText.appendChild(text);
        snackbar.appendChild(snackbarText);

        setTimeout(function() {
          if (previous === this) {
            previous.dismiss();
          }
        }.bind(snackbar), 2000);

        snackbar.addEventListener('transitionend', function(event) {
          if (event.propertyName === 'opacity' && this.style.opacity == 0) {
            this.parentElement.removeChild(this);
            if (previous === this) {
              previous = null;
            }
          }
        }.bind(snackbar));

        previous = snackbar;
        document.body.appendChild(snackbar);
        getComputedStyle(snackbar).transform;
        snackbar.style.transform = 'translateY(0px)';
        snackbar.style.opacity = '1';
      };
    })();

    var message1 = 'Product added to cart';

    var elements = document.querySelectorAll('.product-type-simple:not(.outofstock) .add_to_cart_button, .product-type-simple:not(.outofstock) .single_add_to_cart_button, .product-type-variable .single_add_to_cart_button:not(.disabled)');

    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      element.addEventListener('click', function() {
        if (!element.classList.contains('disabled')) {
//           createSnackbar(message1);
        }
      });
    }

  });
})(jQuery);

/**
 * Woocommerce archive page
 */

(function ($) {

  'use strict';

  $(function () {

    //ordering with select2

    $('.woocommerce-ordering select').select2({
      minimumResultsForSearch: 20
    });

    // carousel for product archive tile images

    $('.crane-product-carousel').slick({
      rows: 0,
      slidesToShow: 1,
      slidesToScroll: 1,
      arrows: true
    });

    // dotdotdot initialization
    var wooProductDescription = $('.product-info .description');
    var wooProductDescriptionTextHeight = wooProductDescription.data('height');
    wooProductDescription.css('height', wooProductDescriptionTextHeight);
    wooProductDescription.dotdotdot({
      watch: true
    });

  });

})(jQuery);

/**
 * Woocommerce minicart
 */

(function ($) {

  'use strict';

  $(function () {

    var miniCart = {

      /**
       * Initialize mini cart UI event.
       */
      init: function () {

        this.checkCount();
        this.item_remove_clicked = this.item_remove_clicked.bind(this);
        this.item_single_add_to_cart = this.item_single_add_to_cart.bind(this);

        $(document).on(
          'click',
          '.mini_cart_item .remove',
          this.item_remove_clicked);

        $(document).on(
          'click',
          'form .single_add_to_cart_button',
          this.item_single_add_to_cart);

      },

      checkCount: function () {

        var cartObserver = new MutationObserver(function () {

          var minicartCount = $('#cart-counter');

          if (minicartCount.text() ==='0' || minicartCount.text() ==='') {
            minicartCount.addClass('gm-hidden');
          } else {
            minicartCount.removeClass('gm-hidden');
          }

        });

        cartObserver.observe(document.body, {
          childList: true,
          subtree: true
        });

      },

      /**
       * Handle when a remove item link is clicked.
       *
       * @param {Object} evt The JQuery event
       */
      item_remove_clicked: function (evt) {

        evt.preventDefault();

        var $a = $(evt.currentTarget);

        $.ajax({
          type: 'GET',
          url: $a.attr('href'),
          dataType: 'html',
          success: function (result) {
            // todo result returns whole page!!!
            $('.gm-minicart .widget_shopping_cart_content').html($(result)
              .find('.gm-minicart .widget_shopping_cart_content').html());

            $('#cart-counter').text($(result)
              .find('#cart-counter').text());
            this.checkCount();
          }.bind(this)

        });

      },

      item_single_add_to_cart: function (evt) {
        // wc_add_to_cart_params is required to continue, ensure the object exists
        if (typeof wc_add_to_cart_params === 'undefined')
          return false;

        evt.preventDefault();

        var $thisbutton = $(evt.currentTarget);

        var $item_form = $thisbutton.closest('form');

        var product_id = $item_form.find('button[name=add-to-cart]').val();
        var quantity = $item_form.find('input[name=quantity]').val();
        var var_id = $item_form.find('input[name=variation_id]').val();
        $('.ajaxerrors').remove();
        var item = {},
          check = true;

        if ($item_form.hasClass('variations_form')) {
          var variations = $item_form.find('select[name^=attribute]');

          /* Updated code to work with radio button - mantish - WC Variations Radio Buttons - 8manos */
          if (!variations.length) {
            variations = $item_form.find('[name^=attribute]:checked');
          }

          /* Backup Code for getting input variable */
          if (!variations.length) {
            variations = $item_form.find('input[name^=attribute]');
          }

          variations.each(function () {

            var $this = $(this),
              attributeName = $this.attr('name'),
              attributeValue = $this.val(),
              index,
              attributeTaxName;

            $this.removeClass('error');

            if (attributeValue.length === 0) {
              index = attributeName.lastIndexOf('_');
              attributeTaxName = attributeName.substring(index + 1);

              $this
                .addClass('required error')
                .after('<div class="ajaxerrors"><p>Please select ' + attributeTaxName + '</p></div>');

              check = false;
            } else {
              item[attributeName] = attributeValue;
            }

          });

          if (!check) {
            return false;
          }


          var data = {
            action: 'woocommerce_add_to_cart_variable_rc',
            product_id: product_id,
            quantity: quantity,
            variation_id: var_id,
            variation: item
          };

        } else {

          var data = {
            action: 'woocommerce_add_to_cart',
            product_id: product_id,
            quantity: quantity
          };

        }

        $thisbutton.removeClass('added');
        $thisbutton.addClass('loading');

        // Trigger event
        $('body').trigger('adding_to_cart', [$thisbutton, data]);

        // Ajax action
        $.post(wc_add_to_cart_params.ajax_url, data, function (response) {

          if (!response)
            return;

          if (response.error && response.product_url) {
            window.location = response.product_url;
            return;
          }

          if (wc_add_to_cart_params.cart_redirect_after_add === 'yes') {

            window.location = wc_add_to_cart_params.cart_url;

          } else {

            $thisbutton.removeClass('loading');

            var fragments = response.fragments;
            var cart_hash = response.cart_hash;

            // Block fragments class
            if (fragments) {
              $.each(fragments, function (key) {
                $(key).addClass('updating');
              });
            }

            // Changes button classes
            $thisbutton.addClass('added');

            // Replace fragments
            if (fragments) {
              $.each(fragments, function (key, value) {
                $(key).replaceWith(value);
              });
            }

            // Trigger event so themes can refresh other areas
            $(document.body).trigger('added_to_cart', [fragments, cart_hash, $thisbutton]);
          }
        });

        return false;

      }

    };
//     miniCart.init();

  });

})(jQuery);

/**
 * Woo cart and checkout functionality
 */

(function ($) {

  'use strict';
  $(function () {

    // Hide bacs header if it's content empty empty

    if ($('.bacs_details li').length == 0) {
      $('.bacs_details').hide();
      $('.bacs_details').prev('h2').hide();
    }

  });
})(jQuery);

/**
 * Woocommerce widgets
 */

(function ($) {

  'use strict';

  $(function () {

    // Helper function to add height to each product list within woo widgets for style purposes

    $('.product_list_widget:not(.cart_list) li').each(function () {
      var imgHeight = $(this).find('img').height();

      $(this).css({
        'min-height': imgHeight
      });

    });

  });

})(jQuery);

/**
 * Grooni Blog widget (visual composer widget)
 */

(function ( $ ) {

  'use strict';

  function Blog( container, options ) {

    this.$container = $(container);
    this.options = $.extend( {}, options);

    this.params = this.$container.data('params');
    this.defaultItemsLimit = this.params.posts_limit;

    this.$gallery = this.$container.find('.crane-blog-grid');
    this.$items = this.$container.find('.crane-blog-grid-item');
    this.existItems = '';
    this.$loadmore = this.$container.find('.paginate-loader');

    this.isotopeOptions = {
      itemSelector: '.crane-blog-grid-item',
      percentPosition: false,
      resize: false,
      initLayout: false,
      masonry: {
        columnWidth: '.crane-blog-grid-sizer'
      },
    };

    this.initIso();
    this.contentLoaded();
    this.triggerRelayout();
    this.$gallery.isotope(this.isotopeOptions);
    this.$gallery.imagesLoaded({ background: true }, function () {
      this.$gallery.isotope('layout');
    }.bind(this));

  }

  Blog.prototype = {

    constructor: Blog,

    initIso: function () {
      this.setDimensions();
      this.setGutter();
      this.getExistItemsId();
      this.initPaginator();
      this.setPaginationColors();
      this.initPlugins();
    },

    contentLoaded: function () {
      this.$gallery.on( 'layoutComplete',
        _.debounce(function( event, laidOutItems ) {
          this.relayout();
          this.$gallery.removeClass('loading');
        }.bind(this), 500)
      );
    },

    relayout: function () {
      this.setDimensions();
      this.$gallery.isotope(this.isotopeOptions);
      this.$gallery.isotope('layout');
    },

    triggerRelayout: function () {
      $(window).resize(_.debounce(function(){
        this.relayout();
      }.bind(this), 200));
    },

    initPlugins: function (  ) {

      if ( this.params.show_excerpt ) {

        var excerptHeight = +this.params.excerpt_height;
        var $excerpt = this.$gallery.find('.crane-blog-grid-meta__excerpt');

        $excerpt.css({
          'max-height': excerptHeight
        });
        $excerpt.dotdotdot({
          ellipsis: crane_js_l10n['excerpt_more'],
          wrap: 'word',
          watch: false,
          height: excerptHeight,
          callback: function( isTruncated ) {
            if (isTruncated) {
              this.relayout();
            }
          }.bind(this)
        });

      }

      var setBlockquoteHeight = function() {

        var blockquote = this.$container.find('.crane-blockquote-main');
        var blockquoteHeight;
        var ctBlogHeader = blockquote.closest('.crane-blog-header');

        if ( this.params.layout === 'masonry' && this.params.ratio !== 'origin' ) {
          blockquoteHeight = ctBlogHeader.height();
          blockquote.css('max-height', blockquoteHeight);
        } else if ( this.params.layout === 'cell' ) {
          blockquoteHeight = this.$container.find('.crane-blog-grid-meta').height();
          blockquote.css('max-height', blockquoteHeight);
        }

        blockquote.dotdotdot({
          watch: true
        });

      }.bind(this);

      setBlockquoteHeight();

      var slideGallery = this.$gallery.find('.gallery');

      slideGallery.on('afterChange', function(event, slick, currentSlide){
        this.relayout();
      }.bind(this));

    },

    updateVisibleItemsCount: function () {
      var itemElems = this.$gallery.isotope('getFilteredItemElements');
      var $itemElems = $(itemElems);
      this.curActiveItems = $itemElems.length;
    },

    setPaginationColors: function (  ) {

      this.defaultBtnTextColor = this.params.pagination_color;
      this.defaultBtnTextColorHover = this.params.pagination_color_hover;
      this.defaultBtnBgColor = this.params.pagination_background;
      this.defaultBtnBgColorHover = this.params.pagination_background_hover;

      this.$loadmore.hover(function (  ) {
        this.$loadmore.css({
          color: this.defaultBtnTextColorHover,
          'background-color': this.defaultBtnBgColorHover
        });
      }.bind(this), function (  ) {
        this.$loadmore.css({
          color: this.defaultBtnTextColor,
          'background-color': this.defaultBtnBgColor
        });
      }.bind(this));
      this.$loadmore.css({
        color: this.defaultBtnTextColor,
        'background-color': this.defaultBtnBgColor
      });

    },

    setGutter: function () {
      this.$gutter = +this.params.grid_spacing;
      this.$items.css({
        'margin-bottom': this.$gutter + 'px',
        'padding-left': this.$gutter/2 + 'px',
        'padding-right': this.$gutter/2 + 'px'
      });

      this.$gallery.css({
        'margin-left': -this.$gutter/2 + 'px',
        'margin-right': -this.$gutter/2 + 'px'
      });
    },

    setDimensions: function (  ) {

      var mobileWidth = +this.params.max_width;

      if ( window.matchMedia('(max-width:' + mobileWidth + 'px)').matches ) {
        this.$container.addClass('crane-blog-widget-mobile');
      } else {
        this.$container.removeClass('crane-blog-widget-mobile');
      }

    },

    getExistItemsId : function (  ) {

      var existItems = [];
      this.$items.each(function () {
        var $dataId = $(this).data('id');
        if (!$dataId) {
          return;
        }
        existItems[existItems.length] = $dataId;
      });
      if (existItems) {
        this.existItems = existItems.join(',');
      } else {
        this.existItems = '';
      }

    },

    initPaginator: function (  ) {

      if (this.params.pagination_type === 'more') {
        this.$loadmore.on('click', $.proxy(function () {
          this.getMoreItems();
        }, this));
      }

    },

    _checkBtnStatus: function () {

      var $activeFilter = this.$container.find('.portfolio-filters-btn.active');
      var $activeFilterLimit = $activeFilter.data('count');

      if (this.curActiveItems === 0 && $activeFilterLimit === 1) {
        this.$loadmore.addClass('invisible');
      }

      else if (this.curActiveItems === $activeFilterLimit) {
        this.$loadmore.addClass('invisible');
      }

      else {
        this.$loadmore.removeClass('invisible');
      }

    },

    getMoreItems: function (  ) {

      var data = {
        'action': 'crane_load_more_blog',
        // crane_ajax_data defined by crane functions.php with wp_localize_script()
        'security': crane_ajax_data.nonce_str,
        'params': this.params,
        'existItems': this.existItems
      };

      $.ajax({

        type: 'post',
        url: crane_ajax_data.ajax_url,
        data: data,
        success: function (response) {
          if (response.status > 0) {
            var $newItems = $(response.html);

            this.$gallery.append($newItems)
              .isotope( 'appended', $newItems );
            this.$items = this.$container.find('.crane-blog-grid-item');
            this.setGutter();
            this.getExistItemsId();
            this.params.posts_limit = this.defaultItemsLimit;
            this.updateVisibleItemsCount();
            this.setDimensions();
            this.initPlugins();
          }
        }.bind(this)

      }).then(function () {

        this.$gallery
          .imagesLoaded()
          .done( function( ) {
            this.$gallery.isotope('layout');
          }.bind(this));

        this._checkBtnStatus();

      }.bind(this));

    }

  };

  $.fn.blog = function (options) {

    return this.each( function() {
      var data = $(this).data( 'blog');

      if (!data) {
        data = new Blog(this, options );
        $(this).data( 'blog', data );
      }
    } );

  };

  $.fn.blog.Constructor = Blog;

})( jQuery );

/**
 * Single blog post functionality
 */

(function ($) {

  'use strict';

  $(function () {

    var blogFormatGallery = $('.crane-gallery-wrapper');

    blogFormatGallery.slick({
      rows: 0,
      slidesToShow: 1,
      slidesToScroll: 1,
      arrows: true,
      adaptiveHeight: true
    });

    $('.gallery').slick({
      rows: 0,
      slidesToShow: 1,
      slidesToScroll: 1,
      arrows: true,
      adaptiveHeight: true
    });

    var galleryLink = $('.gallery-item a');

    galleryLink.each(function () {

      var galleryLinkHref = $(this).attr('href');

      if ( galleryLinkHref.match(/\.(jpg|jpeg|png|gif)/g) ) {
        $(this).addClass('crane-lightbox');
      }

    });

    $('.crane-blog-single .gallery .crane-lightbox').each(function(){
      $(this).magnificPopup({
        type: 'image',
        image: {
          titleSrc: 'title'
        },
        showCloseBtn: false
      });
    });

    var addLightboxToGalleryImg = function () {
      $('.crane-lightbox').each(function(){
        $(this).magnificPopup({
          type: 'image',
          image: {
            titleSrc: 'title'
          },
          showCloseBtn: false
        });
      });
    };

    addLightboxToGalleryImg();

    function makeBlockFullHeight() {

      var html = $('html');
      var adminbarHeight = html.outerHeight(true) - html.innerHeight();
      var groovyHeight = $('.gm-navbar').height();
      var adminPlusGroovyHeight = adminbarHeight + groovyHeight;
      var featuredHeight = 'calc(100vh - ' + adminPlusGroovyHeight + 'px)';
      var bgH100 = $('.bg-h-100');

      if (bgH100) {
        bgH100.css('height', featuredHeight);
      }
    }

    makeBlockFullHeight();

  });

})(jQuery);

/**
 * Direction aware hover effect fo Visual composer Portfolio widget
 */

(function ( $ ) {

  'use strict';

  $( function () {

    function Hoverdir( element, options ) {

      this.$el = $( element );
      // set options
      this.options = $.extend( true, {}, this.defaults, options );
      // initialize visibility to false for show and hide method
      this.isVisible = false;
      // get the hover for this element
      this.$hoverElem = this.$el.find( this.options.hoverElem );
      // transition properties
      this.transitionProp = 'all ' + this.options.speed + 'ms ' + this.options.easing;
      // support for CSS transitions
      this.support = this._supportsTransitions();
      // load the events
      this._loadEvents();

    }

    Hoverdir.prototype = {

      defaults: {
        speed: 300,
        easing: 'ease',
        hoverDelay: 0,
        inverse: false,
        hoverElem: 'div'
      },
      constructor: Hoverdir,
      /**
       * Detect if CSS transitions are supported
       *
       * @return {Boolean}
       */
      _supportsTransitions: function () {

        if ( typeof Modernizr !== 'undefined' ) {
          return Modernizr.csstransitions;
        } else {
          var b = document.body || document.documentElement,
            s = b.style,
            p = 'transition';

          if ( typeof s[ p ] === 'string' ) {
            return true;
          }

          // Tests for vendor specific prop
          var v = [ 'Moz', 'webkit', 'Webkit', 'Khtml', 'O', 'ms' ];
          p = p.charAt( 0 ).toUpperCase() + p.substr( 1 );

          for ( var i = 0; i < v.length; i++ ) {
            if ( typeof s[ v[ i ] + p ] === 'string' ) {
              return true;
            }
          }

          return false;
        }

      },
      /**
       * Bind the events to the element
       */
      _loadEvents: function () {

        this.$el.on( 'mouseenter.hoverdir mouseleave.hoverdir', $.proxy( function ( event ) {
          this.direction = this._getDir( { x: event.pageX, y: event.pageY } );

          if ( event.type === 'mouseenter' ) {
            this._showHover();
          }
          else {
            this._hideHover();
          }
        }, this ) );

      },

      /**
       * Show the hover of the element
       */

      _showHover: function () {

        var styleCSS = this._getStyle( this.direction );

        if ( this.support ) {
          this.$hoverElem.css( 'transition', '' );
        }

        this.$hoverElem.hide().css( styleCSS.from );
        clearTimeout( this.tmhover );

        this.tmhover = setTimeout( $.proxy( function () {
          this.$hoverElem.show( 0, $.proxy( function () {
            if ( this.support ) {
              this.$hoverElem.css( 'transition', this.transitionProp );
            }
            this._applyAnimation( styleCSS.to );

          }, this ) );
        }, this ), this.options.hoverDelay );

        this.isVisible = true;

      },

      /**
       * Hide the hover to the element
       */

      _hideHover: function () {

        var styleCSS = this._getStyle( this.direction );
        if ( this.support ) {
          this.$hoverElem.css( 'transition', this.transitionProp );
        }
        clearTimeout( this.tmhover );
        this._applyAnimation( styleCSS.from );
        this.isVisible = false;
      },

      /**
       * get the direction when the event is triggered
       * credits : http://stackoverflow.com/a/3647634
       *
       * @param {Object} coordinates
       * @returns {Interger}
       */

      _getDir: function ( coordinates ) {

        // the width and height of the current div
        var w = this.$el.width(),
          h = this.$el.height(),
          // calculate the x and y to get an angle to the center of the div from that x and y.
          // gets the x value relative to the center of the DIV and "normalize" it
          x = (coordinates.x - this.$el.offset().left - (w / 2)) * (w > h ? (h / w) : 1),
          y = (coordinates.y - this.$el.offset().top - (h / 2)) * (h > w ? (w / h) : 1),
          // the angle and the direction from where the mouse came in/went out clockwise (TRBL=0123);
          // first calculate the angle of the point,
          // add 180 deg to get rid of the negative values
          // divide by 90 to get the quadrant
          // add 3 and do a modulo by 4 to shift the quadrants to a proper clockwise TRBL (top/right/bottom/left) **/
          direction = Math.round( (((Math.atan2( y, x ) * (180 / Math.PI)) + 180) / 90) + 3 ) % 4;
        return direction;

      },

      /**
       * get the style when the event is triggered
       *
       * @param {(Interger|String)} direction
       * @returns {Object}
       */

      _getStyle: function ( direction ) {

        var fromStyle, toStyle,
          slideFromTop = { 'left': '0', 'top': '-100%' },
          slideFromBottom = { 'left': '0', 'top': '100%' },
          slideFromLeft = { 'left': '-100%', 'top': '0' },
          slideFromRight = { 'left': '100%', 'top': '0' },
          slideTop = { 'top': '0' },
          slideLeft = { 'left': '0' };

        switch ( direction ) {
          case 0:
          case 'top':
            // from top
            fromStyle = !this.options.inverse ? slideFromTop : slideFromBottom;
            toStyle = slideTop;
            break;
          case 1:
          case 'right':
            // from right
            fromStyle = !this.options.inverse ? slideFromRight : slideFromLeft;
            toStyle = slideLeft;
            break;
          case 2:
          case 'bottom':
            // from bottom
            fromStyle = !this.options.inverse ? slideFromBottom : slideFromTop;
            toStyle = slideTop;
            break;
          case 3:
          case 'left':
            // from left
            fromStyle = !this.options.inverse ? slideFromLeft : slideFromRight;
            toStyle = slideLeft;
            break;
        }

        return { from: fromStyle, to: toStyle };

      },
      /**
       * Apply a transition or fallback to jquery animate based on Modernizr.csstransitions support
       *
       * @param {Object} styleCSS
       */
      _applyAnimation: function ( styleCSS ) {
        $.fn.applyStyle = this.support ? $.fn.css : $.fn.animate;
        this.$hoverElem.stop().applyStyle( styleCSS, $.extend( true, [], { duration: this.options.speed } ) );
      },
      /**
       * Show $hoverElem from the direction in argument
       *
       * @param {String} [direction=top] direction
       */
      show: function ( direction ) {
        this.$el.off( 'mouseenter.hoverdir mouseleave.hoverdir' );
        if ( !this.isVisible ) {
          this.direction = direction || 'top';
          this._showHover();
        }
      },
      /**
       * Hide $hoverElem from the direction in argument
       *
       * @param {String} [direction=bottom] direction
       */
      hide: function ( direction ) {
        this.rebuild();
        if ( this.isVisible ) {
          this.direction = direction || 'bottom';
          this._hideHover();
        }
      },
      setOptions: function ( options ) {
        this.options = $.extend( true, {}, this.defaults, this.options, options );
      },
      /**
       * Unbinds the plugin.
       */
      destroy: function () {
        this.$el.off( 'mouseenter.hoverdir mouseleave.hoverdir' );
        this.$el.data( 'hoverdir', null );
      },
      /**
       * Bind the plugin.
       */
      rebuild: function ( options ) {

        if ( typeof options === 'object' ) {
          this.setOptions( options );
        }
        this._loadEvents();

      }
    };

    $.fn.hoverdir = function ( option, parameter ) {

      return this.each( function () {
        var data = $( this ).data( 'hoverdir' );
        var options = typeof option === 'object' && option;

        // Initialize hoverdir.
        if ( !data ) {
          data = new Hoverdir( this, options );
          $( this ).data( 'hoverdir', data );
        }

        // Call hoverdir method.
        if ( typeof option === 'string' ) {
          data[ option ]( parameter );

          if ( option === 'destroy' ) {
            $( this ).data( 'hoverdir', false );
          }
        }
      } );

    };

    $.fn.hoverdir.Constructor = Hoverdir;

  } );

})( jQuery );

(function ( $ ) {

  'use strict';

  $( function () {

    //portfolio single layout: Image at top

    var html = $( 'html' ),
      adminbarHeight = html.outerHeight( true ) - html.innerHeight(),
      headerHeight = $( 'header' ).height(),
      portfolioFullHeight = $( window ).height() - adminbarHeight - headerHeight;

    //Set full height of div

    if ( $( '.crane-portfolio-single-featured-image div' ).hasClass( 'portfolio-featured--size-fullscreen' ) ) {

      $( '.portfolio-featured--size-fullscreen' ).css( 'height', portfolioFullHeight );

    }

    // init dotdotdot on single post navigation
    $('.single-post-nav-title').dotdotdot();

    //portfolio single layout: Slider

    // Init Isotope

    $( '.portfolio-single-grid' ).each( function () {

      var grid = $( this ),
        gridItem = grid.find( '.portfolio-grid-item' ),
        gridWidth = grid.width(),
        columns = $( this ).data( 'columns' ),
        columnWidth = gridWidth / columns,
        settings = {
          itemSelector: '.portfolio-grid-item',
          percentPosition: true,
          masonry: {
            columnWidth: '.portfolio-grid-item'
          }
        };

      gridItem.height( columnWidth );

      grid.isotope( settings );

      grid.imagesLoaded().progress( function() {
        grid.isotope('layout');
      });

      $(window).resize(_.debounce(function(){
        grid.isotope('layout');
      }.bind(this), 200));
    } );

    // init slider

    $('.crane-portfolio-slider').slick({
      rows: 0,
      slidesToShow: 1,
      slidesToScroll: 1,
      arrows: true,
      adaptiveHeight: true
    });

    $('.portfolio-single-grid .portfolio-grid-item a').magnificPopup({
      type: 'image',
      image: {
        titleSrc: 'title'
      },
      showCloseBtn: false
    });

  } );

})( jQuery );

/**
 * Grooni Portfolio widget (visual composer widget)
 */

(function ( $ ) {

  'use strict';

  function Portfolio( container, options ) {

    this.$container = $(container);
    this.options = $.extend( {}, options);

    this.params = this.$container.data('params');
    this.defaultItemsLimit = this.params.posts_limit;
    this.defaultCategory = this.params.category;

    this.$gallery = this.$container.find('.crane-portfolio-grid');
    this.filterInnerContainer = this.$container.find('.portfolio-filters-group');
    this.$filters = this.$container.find('.portfolio-filters-btn');
    this.curFilter = '*';
    this.$item = this.$container.find('.crane-portfolio-grid-item');
    this.existItems = '';
    this.$loadmore = this.$container.find('.paginate-loader');

    this.isotopeOptions = {
      itemSelector: '.crane-portfolio-grid-item',
      resize: false,
      transitionDuration: 250,
      // only opacity for reveal/hide transition
      hiddenStyle: {
        opacity: 0
      },
      visibleStyle: {
        opacity: 1
      },
      masonry: {
      }
    };
    this.initIso();
  }

  Portfolio.prototype = {

    constructor: Portfolio,

    initIso: function (  ) {

      this.$gallery.imagesLoaded( {
        background: '.crane-portfolio-grid-item-placeholder'
      },function () {
        this.setDimensions();
        this.$gallery.isotope(this.isotopeOptions);
      }.bind(this));

      this.setGutter();
      this.getExistItemsId();
      this.filterItems();
      this.initPaginator();
      this.setPaginationColors();
      this.setFiltersColors();
      this.initPlugins();

      this.$gallery.one( 'layoutComplete',_.debounce(function() {
        this.relayout();
        this.updateVisibleItemsCount();
        setTimeout(function () {
          this.$container.removeClass('loading');
        }.bind(this), 100);
      }.bind(this), 200));

      $(window).resize(_.debounce(function(){
        this.relayout();
      }.bind(this), 200));

    },

    relayout: function () {
      this.setDimensions();
      this.$gallery.isotope(this.isotopeOptions);
      this.$gallery.isotope('layout');
    },

    initPlugins: function (  ) {

      if ( this.params.show_excerpt ) {

        var excerptHeight = +this.params.excerpt_height;
        var $excerpt = this.$gallery.find( '.portfolio-excerpt p' );

        $excerpt.css({
          'max-height': excerptHeight
        });

        $excerpt.dotdotdot({
          watch: true
        });

      }

      if (this.params.hover_style === '1') {
        this.$gallery.find( '.crane-portfolio-grid-item-placeholder' ).hoverdir({
          hoverElem: '.portfolio-hover'
        });
      }

      if (this.params.hover_style === '2') {
        this.$gallery.find( '.crane-portfolio-grid-item-placeholder' ).magnificPopup({
          delegate: '.portfolio-zoomlink',
          type: 'image',
          mainClass: 'mfp-with-zoom',
          overflowY: 'scroll',
          gallery: {
            enabled: true
          },
          image: {
            titleSrc: 'title'
          },
          showCloseBtn: false
        });

      }

      if (this.params.hover_style === '5') {
        this.$gallery.find('.chaffle').chaffle({
          speed: 20,
          time: 80
        });
      }

    },

    filterItems: function (  ) {

      var mobileWidth = +this.params.max_width;

      if ( window.matchMedia('(min-width: ' + mobileWidth + 'px)').matches ) {
        this.$container.find('.portfolio-filters').removeClass('hidden');
        this.$container.find('.portfolio-filters-select').addClass('hidden');

        this.$filters.each($.proxy(function(index, filter){
          var $filter = $(filter),
            curFilter = $filter.data('filter'),
            category = $filter.data('cat_slug');

          this.curCategory = this.defaultCategory;
          $filter.on('click', $.proxy(function() {
            if (curFilter !== this.curFilter) {
              this.changeActiveFilter(curFilter);
              this.updateVisibleItemsCount();

              this.$filters.removeClass('active');
              $filter.addClass('active');

              this.curCategory = (category === undefined)
                ? this.defaultCategory
                : category;
              this.params.category = this.curCategory;

              this._checkBtnStatus();

              if (this.curActiveItems < this.defaultItemsLimit) {
                var moreCount = this.defaultItemsLimit - this.curActiveItems;
                if (moreCount > 0) {
                  this.params.posts_limit = moreCount;
                  this.getMoreItems();
                }

              }

            }

          }, this) );

          $filter.on('click', $.proxy(function() {
            if (curFilter !== this.curFilter) {
              this.changeActiveFilter(curFilter);
              this.updateVisibleItemsCount();

              this.$filters.removeClass('active');
              $filter.addClass('active');

              this.curCategory = (category === undefined)
                ? this.defaultCategory
                : category;
              this.params.category = this.curCategory;

              this._checkBtnStatus();

              if (this.curActiveItems < this.defaultItemsLimit) {
                var moreCount = this.defaultItemsLimit - this.curActiveItems;
                if (moreCount > 0) {
                  this.params.posts_limit = moreCount;
                  this.getMoreItems();
                }

              }

            }

          }, this) );

        }, this) );
      } else {

        this.$container.find('.portfolio-filters').addClass('hidden');
        this.$container.find('.portfolio-filters-select').removeClass('hidden');

        this.$container.find('.portfolio-filters-select').on( 'change', function() {
          var filterValue = this.$container
            .find('.portfolio-filters-select')[0].value;

          if (filterValue !== this.curFilter) {
            this.changeActiveFilter(filterValue);
            this.updateVisibleItemsCount();

            this._checkBtnStatus();

            if (this.curActiveItems < this.defaultItemsLimit) {
              var moreCount = this.defaultItemsLimit - this.curActiveItems;
              if (moreCount > 0) {
                this.params.posts_limit = moreCount;
                this.getMoreItems();
              }
            }

          }
        }.bind(this));
      }

    },

    changeActiveFilter: function ( filter ) {
      this.curFilter = filter;
      this.$gallery.isotope({
        filter: (filter === '*') ? '*' : filter
      });
    },

    updateVisibleItemsCount: function () {
      var itemElems = this.$gallery.isotope('getFilteredItemElements');
      var $itemElems = $(itemElems);
      this.curActiveItems = $itemElems.length;
    },

    setFiltersColors: function (  ) {

      this.defaultFilterTextColor = this.params.sortable_text_color;
      this.defaultFilterContainerBg = this.params.sortable_background_color;
      var filterBtn = this.$filters;
      var filtersInnerContainer = this.filterInnerContainer;

      filterBtn.css({
        color: this.defaultFilterTextColor
      });
      filtersInnerContainer.css({
        'background-color': this.defaultFilterContainerBg
      });

    },

    setPaginationColors: function (  ) {

      this.defaultBtnTextColor = this.params.pagination_color;
      this.defaultBtnTextColorHover = this.params.pagination_color_hover;
      this.defaultBtnBgColor = this.params.pagination_background;
      this.defaultBtnBgColorHover = this.params.pagination_background_hover;

      this.$loadmore.hover(function (  ) {
        this.$loadmore.css({
          color: this.defaultBtnTextColorHover,
          'background-color': this.defaultBtnBgColorHover
        });
      }.bind(this), function (  ) {
        this.$loadmore.css({
          color: this.defaultBtnTextColor,
          'background-color': this.defaultBtnBgColor
        });
      }.bind(this));
      this.$loadmore.css({
        color: this.defaultBtnTextColor,
        'background-color': this.defaultBtnBgColor
      });

    },

    setGutter: function (  ) {
      this.$gutter = +this.params.grid_spacing;
      this.isotopeOptions.masonry.gutter = this.$gutter;
      this.$item.css({
        'margin-bottom': this.$gutter+'px'
      });
    },

    setDimensions: function (  ) {

      var containerWidth = this.$container.width();
      var mobileWidth = +this.params.max_width;
      var imgProportion = this.params.img_proportion;
      var columns = +this.params.columns;
      var gutter = this.isotopeOptions.masonry.gutter;
      var placeholder = this.$container.find('.crane-portfolio-grid-item-placeholder');
      var columnWidth = containerWidth/columns - (gutter * (columns-1))/columns;
      var widthRatio = imgProportion.split('x')[0];
      var heightRatio = imgProportion.split('x')[1];
      var ratioMultiplicator = heightRatio / widthRatio;
      var columnHeight = columnWidth * ratioMultiplicator;

      if ( window.matchMedia('(min-width: ' + mobileWidth + 'px)').matches ) {

        if ( this.params.layout === 'masonry') {

          this.isotopeOptions.masonry.columnWidth = columnWidth;

          //set items width

          this.$container
            .find( '[class*="width1"]' )
            .width( columnWidth );

          this.$container
            .find( '[class*="width2"]' )
            .width( columnWidth * ((columns < 2) ? columns : 2) + gutter );

          this.$container
            .find( '[class*="width3"]' )
            .width( columnWidth * ((columns < 3) ? columns : 3) + gutter * 2 );

          this.$container
            .find( '[class*="width4"]' )
            .width( columnWidth * ((columns < 4) ? columns : 4) + gutter * 3 );

          //set items height

          this.$container
            .find( '[class*="height1"] .crane-portfolio-grid-item-placeholder' )
            .height( columnHeight );

          this.$container
            .find( '[class*="height2"] .crane-portfolio-grid-item-placeholder' )
            .height( columnHeight * ((columns < 2) ? columns : 2) + gutter );

          this.$container
            .find( '[class*="height3"] .crane-portfolio-grid-item-placeholder' )
            .height( columnHeight * ((columns < 3) ? columns : 3) + gutter * 2 );

          this.$container
            .find( '[class*="height4"] .crane-portfolio-grid-item-placeholder' )
            .height( columnHeight * ((columns < 4) ? columns : 4) + gutter * 3 );

        } else {

          this.$item.width( columnWidth );
          placeholder.height( columnHeight );

        }

        this.$container.removeClass('crane-portfolio-widget-mobile');

      } else {

        this.$container.addClass('crane-portfolio-widget-mobile');
        this.$item.width(containerWidth);
        placeholder.height(containerWidth);

      }

    },

    getExistItemsId : function (  ) {

      var existItems = [];

      this.$item.each(function () {
        var $dataId = $(this).data('id');
        if (!$dataId) {
          return;
        }
        existItems[existItems.length] = $dataId;
      });

      if (existItems) {
        this.existItems = existItems.join(',');
      } else {
        this.existItems = '';
      }

    },

    initPaginator: function (  ) {

      if (this.params.pagination_type === 'show_more') {
        this.$loadmore.on('click', $.proxy(function () {
          this.getMoreItems();
        }, this));
      }

    },

    _checkBtnStatus: function () {
      var $activeFilter = this.$container.find('.portfolio-filters-btn.active');
      var $activeFilterLimit = $activeFilter.data('count');

      if ($activeFilterLimit === 1 || this.curActiveItems === $activeFilterLimit) {
        this.$loadmore.addClass('invisible');
      }

      else {
        this.$loadmore.removeClass('invisible');
      }

    },

    getMoreItems: function (  ) {

      var data = {
        'action': 'crane_load_more_portfolio',
        // crane_ajax_data defined by crane functions.php with wp_localize_script()
        'security': crane_ajax_data.nonce_str,
        'params': this.params,
        'existItems': this.existItems
      };

      $.ajax({
        type: 'post',
        url: crane_ajax_data.ajax_url,
        data: data
      }).done(function (response) {

        var $newItems = $(response.html);

        this.$loadmore.find('.btn-txt').addClass('hidden');
        this.$loadmore.find('.fa').removeClass('hidden');

        $newItems.each(function () {
          $(this).addClass('invisible');
        });

        this.$gallery.append($newItems);
        this.$item = this.$container.find('.crane-portfolio-grid-item');
        this.setGutter();
        this.getExistItemsId();
        this.params.posts_limit = this.defaultItemsLimit;
        this.updateVisibleItemsCount();
        this._checkBtnStatus();
        this.setDimensions();
        this.initPlugins();

        this.$gallery
          .imagesLoaded()
          .done(function() {
            setTimeout(function () {
              this.$loadmore.find('.btn-txt').removeClass('hidden');
              this.$loadmore.find('.fa').addClass('hidden');
              this.$gallery.isotope('appended', $newItems);
              this.$gallery.isotope('layout');
              this.$item.removeClass('invisible');

            }.bind(this), 400);
          }.bind(this));

      }.bind(this));

    }

  };

  $.fn.portfolio = function (options) {

    return this.each( function() {
      var data = $(this).data( 'portfolio');

      if (!data) {
        data = new Portfolio(this, options );
        $(this).data( 'portfolio', data );
      }
    } );

  };

  $.fn.portfolio.Constructor = Portfolio;

})( jQuery );

/**
 * Helper functions
 */

'use strict';

// detecting if element in viewport

function isScrolledIntoView($elem) {

  if ($elem.length === 0) {
    return false;
  }
  var $window = jQuery(window);
  var docViewTop = $window.scrollTop();
  var docViewBottom = docViewTop + $window.height();

  var elemTop = $elem.offset().top;
  var elemBottom = elemTop + $elem.height();

  return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
}

/**
 * Fix Ultimate Addons carousel overlapping issue
 */

(function( $ ) {

  'use strict';

  $(window).load(function() {

    var uaCarousel = $('.ult-carousel-wrapper');
    var dots = $('.slick-dots');

    uaCarousel.each(function(i, el) {

      if ( $(el).find(dots).length === 0 ) {

        $(el).css({
          'margin-bottom': '0px',
          'padding-bottom': '0px'
        });

      }

    });

  });

}) ( jQuery );

/**
 * Grooni wordpress widget: latest photos
 */

(function( $ ) {

  'use strict';

  $('.crane-w-images').each(function() {
    $(this).magnificPopup({

      delegate: 'a.crane-popup-box',
      type: 'image',
      mainClass: 'mfp-with-zoom',
      gallery: {
        enabled: true
      },
      image: {
        titleSrc: 'title'
      },
      showCloseBtn: true

    });
  });

}) ( jQuery );

/**
 * Preloader init
 */

(function ($) {

  'use strict';

  $('.preloader').append('<div class="loader-inner ' + crane_PreloaderType + '"></div>');
  $('.loader-inner').loaders();
  $(window).on('load',function () {
    $('.preloader').addClass('is-hidden');
  });

})(jQuery);

/**
 * Helper functions for toggling css classes on touch devises and on breakpoint
 */

(function ($) {

  'use strict';
  $(function () {

    var body = $('body');

    // toggle specific class on 768px device width

    function toggleClassOnBreakpoint() {
      if ( window.matchMedia('(max-width: 768px)').matches ) {
        body.removeClass('crane-desktop').addClass('crane-mobile');
      } else {
        body.removeClass('crane-mobile').addClass('crane-desktop');
      }
    }

    toggleClassOnBreakpoint();

    $(window).resize(_.debounce(function(){
      toggleClassOnBreakpoint();
    }.bind(this), 200));


    // toggle specific class on touch devises

    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {

      body.addClass('touch');

    } else {

      body.addClass('no-touch');

    }

  });
})(jQuery);

/**
 * Init mediaelementplayer with specific options
 */

(function ($) {

  'use strict';
  $(function () {

    try {

      $('.wp-audio-shortcode').mediaelementplayer({
        audioVolume: 'vertical'
      });

      $('.wp-video-shortcode').mediaelementplayer({
        videoVolume: 'vertical',
        hideVideoControlsOnLoad: true,
        hideVideoControlsOnPause: true
      });

    }
    catch (e) {
    }

  });
})(jQuery);

(function ($) {

  'use strict';

  $(function () {

    // embed content

    $('.embeded-content iframe').each(function () {
      var width = $(this).attr('width');
      var newWidth = $(this).width();
      var newHeight = (newWidth / width) * $(this).attr('height');
      $(this).css({height: newHeight + 'px'});
    });

    // init select2 on wordpress widget select tag

    $('.widget select').select2({
      minimumResultsForSearch: 20 // at least 20 results must be displayed
    });

    // init blog visual composer widget

    $('.crane-blog-widget').blog();

    // init portfolio visual composer widget

    $('.crane-portfolio-widget').portfolio();

    // add  excerpt height functionality to recent comments widget
    var recentCommentsText = $('.crane-re-comments__text');
    var recentCommentsTextHeight = recentCommentsText.data('height');
    recentCommentsText.css('max-height', recentCommentsTextHeight);
    recentCommentsText.dotdotdot({
      watch: true
    });

  });

  var currentUrl = window.location.pathname;
  var widgetLink = $('.crane-archive-widget a, .widget .page_item a');

  widgetLink.each(function (i) {
    if ($(this)[0].pathname === currentUrl) {
      $(this).closest('li').addClass('current-cat');
    }
  });

})(jQuery);

// remove 300ms delay on touch devises

window.addEventListener('load', function () {

  FastClick.attach(document.body);

}, false);

/**
 * Social share functionality for blog and portfolio
 */

(function ($) {

  'use strict';
  $(function () {

    function ctShare() {

      $('.crane-share').each(function () {

        var self = $(this);
        var currentShareBlock = self.find('.crane-share-list');

        if (window.matchMedia('(min-width: 768px)').matches) {

          self.find('.crane-share-icon').on('click', function () {
            $('.crane-share-list').removeClass('visible');
            currentShareBlock.addClass('visible');
          });

          $(document).click(function(event) {
            if (!$(event.target).closest('.crane-share').length) {
              currentShareBlock.removeClass('visible');
            }
          });

        } else {

          self.find('.crane-share-icon').off('click');
          $('.crane-share-list').removeClass('visible');

        }

      });

    }

    ctShare();

    $(window).resize(_.debounce(function() {
      ctShare();
    }, 200));

    $('.twitter-share').on('click', function () {
      var $url = $(this).attr('data-url'),
        $title = $(this).attr('data-title');

      window.open('http://twitter.com/intent/tweet?text=' + $title + ' ' + $url, 'twitterWindow', 'height=380,width=660,resizable=0,toolbar=0,menubar=0,status=0,location=0,scrollbars=0');
      return false;
    });

    $('.pinterest-share').on('click', function () {
      var $url = $(this).attr('data-url'),
        $title = $(this).attr('data-title'),
        $image = $(this).attr('data-image');
      window.open('http://pinterest.com/pin/create/button/?url=' + $url + '&media=' + $image + '&description=' + $title, 'twitterWindow', 'height=320,width=660,resizable=0,toolbar=0,menubar=0,status=0,location=0,scrollbars=0');
      return false;
    });

    $('.facebook-share').on('click', function () {
      var $url = $(this).attr('data-url');
      window.open('https://www.facebook.com/sharer/sharer.php?u=' + $url, 'facebookWindow', 'height=380,width=660,resizable=0,toolbar=0,menubar=0,status=0,location=0,scrollbars=0');
      return false;
    });

    $('.googleplus-share').on('click', function () {
      var $url = $(this).attr('data-url');
      window.open('https://plus.google.com/share?url=' + $url, 'googlePlusWindow', 'height=380,width=660,resizable=0,toolbar=0,menubar=0,status=0,location=0,scrollbars=0');
      return false;
    });

    $('.linkedin-share').on('click', function () {
      var $url = $(this).attr('data-url'),
        $title = $(this).attr('data-title'),
        $desc = $(this).attr('data-desc');
      window.open('http://www.linkedin.com/shareArticle?mini=true&url=' + $url + '&title=' + $title + '&summary=' + $desc, 'linkedInWindow', 'height=380,width=660,resizable=0,toolbar=0,menubar=0,status=0,location=0,scrollbars=0');
      return false;
    });

  });
})(jQuery);

/**
 * Scroll to top function
 */

(function ($) {

  'use strict';
  $(function () {

    var offset = 300,
      offsetOpacity = 1200,
      scrollTopDuration = 700,
      $backToTop = $('.crane-top');

    $(window).scroll(function () {

      if ($(this).scrollTop() > offset) {
        $backToTop.addClass('crane-is-visible');
      } else {
        $backToTop.removeClass('crane-is-visible crane-fade-out');
      }

      if ($(this).scrollTop() > offsetOpacity) {
        $backToTop.addClass('crane-fade-out');
      }

    });

    $backToTop.on('click', function (e) {

      e.preventDefault();
      $('body,html').animate({
        scrollTop: 0
      }, scrollTopDuration
      );

    });

  });
})(jQuery);

/**
 * Crane fallback menu if groovy menu doesn't activated
 */

(function ($) {

  'use strict';
  $(function () {

    function enableFallbackMenu() {
      var body = $('body');
      var parentMenuItem = $('.crane-navbar');
      var subMenu = $('.crane-navbar .sub-menu');
      var mobileNavBtn = $('.crane-menu-btn');

      subMenu.addClass('hidden');

      function toggleNav(e) {

        var $target = $(e.currentTarget);
        var $targetSiblings = $target.find('.sub-menu');
        e.stopPropagation();
        subMenu.addClass('hidden');
        $(this).children('.sub-menu').toggleClass('hidden');
        $(this).parents('.sub-menu').removeClass('hidden');
      }

      parentMenuItem.on('click','.menu-item-has-children', toggleNav);

      $(window).on('click', function () {
        subMenu.addClass('hidden');
      });

      function hideNavOnMobileInitially() {
        if (body.hasClass('crane-mobile')) {
          $('.crane-nav').addClass('hidden');
        } else {
          $('.crane-nav').removeClass('hidden');
        }
      }

      hideNavOnMobileInitially();

      $(window).resize(_.debounce(function(){
        hideNavOnMobileInitially();
      }.bind(this), 200));

      function toggleMobNav(e) {
        e.stopPropagation();
        e.preventDefault();
        $('.crane-nav').toggleClass('hidden');
      }

      mobileNavBtn.on('click', toggleMobNav);
    }

    if ($('header').hasClass('crane-navbar')) {
      enableFallbackMenu();
    }

  });
})(jQuery);

/**
 * Adds fixed footer functionality
 */

(function ($) {

  'use strict';
  $(function () {

    var body = $('body');
    var footer = $('.footer');

    function addGapToContainer(container, gap) {
      container.css('margin-bottom', gap);
    }

    // Groovy menu support

    function addOffsetToFooter(offset) {

      if (body.hasClass('gm-nav--style-3--left-sidebar') ) {
        footer.css({
          'left': offset
        });
      } else if ( body.hasClass('gm-nav--style-3--right-sidebar') ) {
        footer.css({
          'right': offset
        });
      } else if ( body.hasClass('gm-nav--style-4--left-sidebar') ) {
        footer.css({
          'left': offset
        });

      } else if ( body.hasClass('gm-nav--style-4--right-sidebar') ) {
        footer.css({
          'right': offset
        });
      }

    }

    function makeGapForFooter() {

      var gmWidth = Math.ceil($('.gm-navbar').width()) + 'px';
      var desktopWidth = 1200;
      var footerHeight = footer.innerHeight();
      var container = $('.crane-content');

      if (footer.hasClass('footer-appearance-fixed')) {

        if (window.matchMedia( '(min-width:' + desktopWidth + 'px)' ).matches) {
          addOffsetToFooter(gmWidth);
          addGapToContainer(container, footerHeight);

        } else {
          addOffsetToFooter(0);
          addGapToContainer(container, 0);
        }

      }
    }

    makeGapForFooter();

    $(window).resize(_.debounce(function() {
      makeGapForFooter();
    }, 200));

  });
})(jQuery);

/**
 * Adds floating effect to inputs that have specific css classes
 */

(function ($) {

  'use strict';
  $(function () {

    function floatLabel(inputType) {

      $(inputType).each(function () {

        var self = $(this);
        // on focus add class active to label
        self.focus(function () {
          self.closest('p').addClass('active');
        });
        //on blur check field and remove class if needed
        self.blur(function () {
          if (self.val() === '' || self.val() === 'blank') {
            self.closest('p').removeClass('active');
          }
        });

      });
    }

    floatLabel('.floatLabel');

  });
})(jQuery);

/**
 * Timeline Visual Composer widget
 */

(function ($) {

  'use strict';
  $(function () {

    $('.timeline__scale__item__year').on('hover click', function () {

      $('.timeline__scale__item').removeClass('selected');
      $(this).parent().addClass('selected');
      $('.timeline__scale__item__txt').addClass('invisible');
      $(this).next().removeClass('invisible');

    });

    $('.crane-timeline .timeline__scale__item').on('mouseover', function () {

      $(this).closest('.crane-timeline').find('.selected').removeClass('selected').find('.timeline__scale__item__txt').addClass('invisible');
      $(this).addClass('selected').find('.timeline__scale__item__txt').removeClass('invisible');

    });

    $('.crane-timeline .timeline__scale__item').first().addClass('selected').find('.timeline__scale__item__txt').removeClass('invisible');

  });
})(jQuery);

/**
 * Toggle content Visual Composer widget
 */

(function ($) {

  'use strict';
  $(function () {
    
    $('.crane-toggle__body').hide();

    $('.crane-toggle').on('click', '.crane-toggle__header-content', toggleContent);

    function toggleContent() {
      $(this).toggleClass('crane-toggle__body--toggled');
      $('.crane-toggle__body').slideToggle();

      setTimeout(function () {
        $(window).trigger('resize');
      }, 50);
    }

  });
})(jQuery);

/**
 * Progress bar Visual Composer widget
 */

(function ($) {

  'use strict';
  $(function () {
    
    $(window).on('scroll', function () {

      $('.progress-bar__bar0').each(function () {
        if ( isScrolledIntoView($(this)) ) {
          $(this).removeClass('progress-bar__bar0');
        }
      });

    });

  });
})(jQuery);